{"version":3,"file":"js/111.8d09c82b.js","mappings":"2NAEO,MAAMA,EAAU,ikBAgCVC,EAAgB,yYAmBhBC,EAAkB,6xBAiClBC,EAAe,kcAoBvBC,EAAAA,uIAOAC,EAAAA,6EAKQC,EAAkB,q5BAwClBC,EAAoB,klB,oFC5IjC,MAAMC,GAAOC,EAAAA,EAAAA,IAAS,CACpBC,cAAe,CACb,CACEC,MAAO,WACPC,KAAM,SAER,CACED,MAAO,YACPC,KAAM,aAER,CACED,MAAO,eACPC,KAAM,aAER,CACED,MAAO,kBACPC,KAAM,eAER,CACED,MAAO,cACPC,KAAM,Y,45SCnCZ,MAAMC,EAAc,EAEpB,O,8JCFA,MAAMC,EAAQC,EAIRC,GAAOC,EAAAA,EAAAA,KAAS,IAAM,SAAWH,EAAMI,O,4GCJ7C,MAAML,EAAc,EAEpB,O,sNCAA,MAAMM,GAAQC,EAAAA,EAAAA,MACRC,EAAOC,EAMPC,EAAMC,IACH,CACLC,KAAMN,EAAMM,KACZC,OAAQ,CACNd,KAAMY,EAAKZ,QAKXe,EAASf,IACTO,EAAMO,OAAOd,OAASA,GACxBS,EAAK,QAAST,EAChB,E,qfCrBF,MAAMC,EAAc,EAEpB,Q,kHCAA,MAAMM,GAAQC,EAAAA,EAAAA,OAMdQ,EAAAA,EAAAA,KAAU,KACJT,EAAMO,QAAQd,MAChBiB,EAAOV,EAAMO,OAAOd,KACtB,KAGFkB,EAAAA,EAAAA,KACI,IAAMX,EAAMD,OACZ,IAAMW,EAAOV,EAAMO,OAAOd,QAE9B,MAAMiB,EAAUjB,IACdmB,YACI,IAAMC,SAASC,eAAerB,IAAOsB,eAAe,CAACC,SAAU,YAC/D,IACH,E,+LCnBH,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O,8ECPWC,MAAM,Q,kCAAfC,EAAAA,EAAAA,IAOU,UAPVC,EAOU,EANRC,EAAAA,EAAAA,IAES,gBADPC,EAAAA,EAAAA,IAA2BC,EAAAC,OAAA,aAE7BH,EAAAA,EAAAA,IAEO,cADLC,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,c,eCLnB,MAAMC,EAAS,CAAC,EAGV9B,GAA2B,OAAgB8B,EAAQ,CAAC,CAAC,SAASC,KAEpE,O,uWCHA,MAAM/B,EAAc,EAEpB,O,8ECJWuB,MAAM,kB,GACRA,MAAM,a,GAEJA,MAAM,a,kCAHfC,EAAAA,EAAAA,IAOU,UAPVC,EAOU,EANRC,EAAAA,EAAAA,IAKM,MALNM,EAKM,EAJJL,EAAAA,EAAAA,IAA2BC,EAAAC,OAAA,WAC3BH,EAAAA,EAAAA,IAEM,MAFNO,EAEM,EADJN,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,gB,eCJrB,MAAMC,EAAS,CAAC,EAGV9B,GAA2B,OAAgB8B,EAAQ,CAAC,CAAC,SAASC,KAEpE,O,8ECNO,MAAMxC,EAAU,IACVC,EAAY,G,8ECAlB+B,MAAM,mB,GACFA,MAAM,wB,kCADfC,EAAAA,EAAAA,IASM,MATNC,EASM,EARJC,EAAAA,EAAAA,IAOQ,QAPRM,EAOQ,EANNN,EAAAA,EAAAA,IAEQ,eADNC,EAAAA,EAAAA,IAAyBC,EAAAC,OAAA,eAAAK,GAAA,MAE3BR,EAAAA,EAAAA,IAEQ,eADNC,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,kBAAAK,GAAA,Q,eCNrB,MAAMJ,EAAS,CAAC,EAKV9B,GAA2B,OAAgB8B,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O,8ECPOR,MAAM,wBAAwBY,KAAK,S,kCAAxCX,EAAAA,EAAAA,IAGM,MAHNC,EAGM,EAFJC,EAAAA,EAAAA,IAAyC,WAAtCA,EAAAA,EAAAA,IAAkC,WAA/BC,EAAAA,EAAAA,IAA2BC,EAAAC,OAAA,eACjCF,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,Y,eCFjB,MAAMC,EAAS,CAAC,EAGV9B,GAA2B,OAAgB8B,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://documentation/./src/data/codes/php/started/map/index.js","webpack://documentation/./src/pages/started/map/BasePage.vue","webpack://documentation/./src/pages/started/map/BasePage.vue?4dd7","webpack://documentation/./src/components/link/ApiLink.vue","webpack://documentation/./src/components/link/ApiLink.vue?8ca0","webpack://documentation/./src/components/table-contents/NodeTree.vue","webpack://documentation/./src/components/table-contents/NodeTree.vue?2300","webpack://documentation/./src/components/table-contents/TableContents.vue","webpack://documentation/./src/components/table-contents/TableContents.vue?aea1","webpack://documentation/./src/components/container/MainContainer.vue","webpack://documentation/./src/components/container/MainContainer.vue?d168","webpack://documentation/./src/components/block-code/CodeBlock.vue","webpack://documentation/./src/components/container/CardContainer.vue","webpack://documentation/./src/components/container/CardContainer.vue?f5d0","webpack://documentation/./src/utils/emojis/index.js","webpack://documentation/./src/components/table/TableBlock.vue","webpack://documentation/./src/components/table/TableBlock.vue?792d","webpack://documentation/./src/components/messages/AlertMessage.vue","webpack://documentation/./src/components/messages/AlertMessage.vue?6b34"],"sourcesContent":["import {crossMark, isRight} from \"@/utils/emojis\";\n\nexport const mapBase = `\nuse Sholokhov\\\\Exchange\\\\Fields\\\\Field;\n\n$source = [\n    [\n        'name' => 'Название элемента',\n        'price' => 15.2\n    ],\n    [\n        'name' => 'Еще какой-то товар',\n        'price' => 17.2,\n    ],\n    [\n        'name' => 'Хороший товар',\n        'price' => 15.2,\n        'image' => 'https://example/upload/image.png'\n    ]\n];\n\n$map = [\n    (new Field)\n        ->setFrom('name')\n        ->setTo('NAME')\n        ->setPrimary(),\n    (new Field)\n        ->setFrom('image')\n        ->setTo('PREVIEW_PICTURE')\n];\n\n$exchange->setMap($map);\n`;\n\nexport const codeNormalize = `\nuse Sholokhov\\\\Exchange\\\\Fields\\\\Field;\nuse Sholokhov\\\\Exchange\\\\Fields\\\\FieldInterface;\n\n$data = [\n    [\n        'user' => 'Иванов|34 года',\n    ],\n    [\n        'user' => 'Пупкин|18'\n    ]\n];\n\n$nameField = new Field;\n$nameField->setFrom('user');\n$nameField->setTo('USER')\n$nameField->setNormalizer(fn(mixed $value, FieldInterface $field) => stristr($value, '|', true));\n`;\n\nexport const codePreparation = `\nuse Sholokhov\\\\Exchange\\\\Fields\\\\Field;\nuse Sholokhov\\\\Exchange\\\\Messages\\\\Type\\\\DataResult;\n\nuse Bitrix\\\\Main\\\\Error;\nuse Bitrix\\\\Main\\\\Web\\\\HttpClient;\n\n\n$field->setPreparation(function(mixed $value, FieldInterface $field) {\n    $result = new DataResult;\n    $url = 'https://myweb.com/upload/' . $value;\n    \n    $options = [\n        'headers' => [\n            'Authorization: OAuth MYToken'\n        ]\n    ];\n    \n    $http = new HttpClient($options);\n    $tmp = CFile::GetTempName('', 'tmp.' . md5(mt_rand())); \n    \n    if ($http->download($url, $tmp)) {\n        $result->setData(\n            CFile::MakeFileArray($tmp)\n        );\n    } else {\n        $result->addError(new Error('Ошибка получения изображения: ' . $url));\n    }\n    \n    return $result;\n});\n`;\n\nexport const codeChildren = `\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => 'https://web.ru/upload/1.png',\n                    'name' => '1.png',\n                ],\n                [   \n                    'sdn' => 'https://web.ru/upload/2.png',\n                    'name' => '2.png'\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n// ${isRight} Работает \n$field = new Field;\n$field->setFrom('images.image');\n$field->setChildren(\n    (new Field)->setFrom('sdn')\n);\n\n// ${crossMark} Не работает\n$field = new Field;\n$field->setFrom('images.image.sdn');\n`;\n\nexport const codeChildrenLvl = `\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => [\n                        [\n                            'path' => 'https://web.ru/upload/1.png'\n                            'name' => '1.png',\n                        ]\n                    ]\n                ],\n                [   \n                    'sdn' => [\n                        [\n                            'path' => 'https://web.ru/upload/2.png'\n                            'name' => '2.png',\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n$field = new Field;\n$field->setFrom('images.image');\n$field->setChildren(\n    (new Field)\n        ->setFrom('sdn')\n        ->setChildren(\n            (new Field)\n                ->setFrom('path')\n        )\n);\n`;\n\nexport const codeChildrenFirst = `\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => 'https://web.ru/upload/1.png',\n                    'name' => '1.png',\n                ],\n                [   \n                    'sdn' => 'https://web.ru/upload/2.png',\n                    'name' => '2.png'\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n$field = new Field;\n// т.к. в image хранится перечисляемый массив, то нам достаточно указать номер ключа\n$field->setFrom('images.image.0.sdn');\n`;","<script setup>\nimport {reactive} from \"vue\";\nimport MainContainer from \"@/components/container/MainContainer.vue\";\nimport ApiLink from \"@/components/link/ApiLink.vue\";\nimport {\n  codeChildrenLvl,\n  codeChildren,\n  codeNormalize,\n  codePreparation,\n  mapBase,\n  codeChildrenFirst\n} from \"@/data/codes/php/started/map\";\nimport CodeBlock from \"@/components/block-code/CodeBlock.vue\";\nimport AlertMessage from \"@/components/messages/AlertMessage.vue\";\nimport TableContents from \"@/components/table-contents/TableContents.vue\";\nimport TableBlock from \"@/components/table/TableBlock.vue\";\nimport CardContainer from \"@/components/container/CardContainer.vue\";\n\nconst data = reactive({\n  tableContents: [\n    {\n      title: 'Введение',\n      hash: 'start'\n    },\n    {\n      title: 'Структура',\n      hash: 'structure',\n    },\n    {\n      title: 'Нормализация',\n      hash: 'normalize',\n    },\n    {\n      title: 'Преобразователь',\n      hash: 'preparation',\n    },\n    {\n      title: 'Вложенность',\n      hash: 'depth',\n    }\n  ]\n});\n</script>\n\n<template>\n  <main-container>\n    <h1>Маршрутизация обмена</h1>\n\n    <table-contents :items=\"data.tableContents\" />\n  </main-container>\n\n  <card-container>\n    <h2 id=\"start\">Введение</h2>\n    <p>\n      Карта обмена является неотъемлемый частью в успешном обмене.\n      Карта позволяет связать данные из <router-link :to=\"{name: 'source'}\">источника</router-link> со <router-link :to=\"{name: 'import'}\">сущностью</router-link> в которую вставляются данные источника.\n    </p>\n\n    <p>\n      Каждый класс описывающий свойство принимающее участие в обмене, должен реализовывать интерфейс\n      <api-link path=\"classes/Sholokhov-Exchange-Fields-FieldInterface.html\">FieldInterface</api-link>\n      <br>\n      Разберем пример, который продемонстрирует легкость настройки.\n    </p>\n\n    <code-block :code=\"mapBase\" />\n\n    <p>\n      Из примера можно заметить, что метод <b>setFrom</b> отвечает за данные из источника данных, а метод <b>setIn</b> за свойства, которые относятся к сущности в которую производим импорт.\n      <br>\n      Именно данная связь является основополагающей, для организации корректного обмена. Можем заметить, что в карте мы пытаемся получить изображения,\n      но не у всех импортируемых элементов оно есть - тут нет нечего страшного, ведь он просто будет иметь пустое значение, и не вызовет исключение или иного отклонения в работе обмена.\n      <br>\n      Если вы внимательный читатель, то могли обратить внимание на сеттер <b>setPrimary</b> - указывает, что данное поле является ключевым на основе которого будет происходит поиск других элементов, и приниматься решение необходимости добавления или обновления.\n    </p>\n  </card-container>\n\n  <card-container>\n    <h2 id=\"structure\">Структура</h2>\n    <p>Класс: <api-link path=\"classes/Sholokhov-Exchange-Fields-Field.html\">Field</api-link></p>\n\n    <p>\n      Класс описания имеет стандартный набор методов, позволяющий настроить взаимодействие между источником данных и сущностью в которую производится запись.\n      Все стандартные классы описывающие свойство являются наследниками данного объекта.\n    </p>\n    <table-block>\n\n      <tr>\n        <td>Наименование</td>\n        <td>Обязательное</td>\n        <td>Тип данных</td>\n        <td>Описание</td>\n      </tr>\n\n      <tr>\n        <td>setPrimary</td>\n        <td><b>Да</b></td>\n        <td>boolean</td>\n        <td>Выступает в качестве идентификационного поля(связывает элементы сущности и элементы источника данных)</td>\n      </tr>\n      <tr>\n        <td>setFrom</td>\n        <td><b>Да</b></td>\n        <td>string</td>\n        <td>Путь до значения, которое вернул источник. Если путь является вложенным, то каждый уровень разделяется символом \".\"</td>\n      </tr>\n      <tr>\n        <td>setIn</td>\n        <td><b>Да</b></td>\n        <td>string</td>\n        <td>В какой ключ будет записываться значение из структуры данных источника</td>\n      </tr>\n      <tr>\n        <td>setPreparation</td>\n        <td>Нет</td>\n        <td><a href=\"https://www.php.net/manual/ru/language.types.callable.php\" target=\"_blank\">callable</a></td>\n        <td>Пользовательский преобразователь значения текущего свойства</td>\n      </tr>\n      <tr>\n        <td>setChildren</td>\n        <td>Нет</td>\n        <td><api-link path=\"classes/Sholokhov-Exchange-Fields-FieldInterface.html\">FieldInterface</api-link></td>\n        <td>Указывает путь до вложенного значения. Предназначен, для получения значения внутри итерируемых элементов</td>\n      </tr>\n      <tr>\n        <td>setNormalizer</td>\n        <td>Нет</td>\n        <td><a href=\"https://www.php.net/manual/ru/language.types.callable.php\" target=\"_blank\">callable</a></td>\n        <td>\n          Указываем произвольный нормализатор значения - используется перед преобразованием значения на основе настроек сущности.\n          Данный метод может подойти, если нам из источника приходят \"грязные\" данные.\n          Пример: из источника приходит строка \"Иванов|34 года\", а нам для импорта нужен только \"Иванов\".\n          Наш нормализатор произведет форматирование значения к нужному формату\n        </td>\n      </tr>\n    </table-block>\n\n    <alert-message>\n      <template #header>\n        Внимание!\n      </template>\n      <p>В карте должно быть только одно свойство, которое выступает идентификационным <b>(setPrimary)</b></p>\n    </alert-message>\n  </card-container>\n\n  <card-container>\n    <h2 id=\"normalize\">Нормализация значения</h2>\n    <p>\n      Рассмотрим пример использования пользовательского обработчика значений, в поле \"user\" хранятся значения формата <b>{фамилия}|{возраст}</b>.\n      В рамках данной задачи нам необходимо из этой строки получить фамилию.\n      <br>\n      Наш нормализатор получает 2 входных параметра:\n    </p>\n    <ul>\n       <li>Значение, которое необходимо нормализовать (может иметь любой тип данных)</li>\n       <li>Свойство, значение которого нормализуем. Оно имеет тип данных <api-link path=\"classes/Sholokhov-Exchange-Fields-FieldInterface.html\">FieldInterface</api-link></li>\n    </ul>\n\n    <code-block :code=\"codeNormalize\" />\n  </card-container>\n\n  <card-container>\n    <h2 id=\"preparation\">Преобразователь значения</h2>\n    <p>\n      Каждое свойство наделено возможностью указания собственного преобразователя данных, если значение необходимо обработать уникальным подходом и игнорировать альтернативные решения.\n      Указав свойству собственный нормализатор, в таком случае все зарегистрированные нормализаторы внутри обмена игнорируются.\n      <br>\n      Результатом работы нормализатора служит объект реализующий интерфейс <api-link path=\"classes/Sholokhov-Exchange-Messages-DataResultInterface.html\">DataResultInterface</api-link>\n    </p>\n    <h4>Пример</h4>\n    <p>\n      Перед нами стоит цель: создать собственный преобразователь значения типа файл.\n      В качестве значения нам передается символьный код, который позволяет получить изображение из внешнего ресурса.\n      <br>\n      Может показаться, что можно использовать нормализатор данных, но нормализатор предназначен, для форматирования значения.\n      В нашем примере помимо преобразования пути предстоит произвести http запрос и скачать изображение, предварительно сохранив в файловой системе сервера.\n      Согласитесь, довольно много обязанностей, для обычного форматирования.\n    </p>\n\n    <code-block :code=\"codePreparation\" />\n  </card-container>\n\n  <card-container>\n    <h2 id=\"depth\">Вложенный путь</h2>\n    <p>\n      В некоторых случаях нам может потребоваться получить значения внутри итерируемого объекта.\n      Рассмотрим пример на массиве, где нужно получить путь до изображения\n    </p>\n\n    <code-block :code=\"codeChildren\" />\n\n    <p>\n      Разберем более подробно пример приведенный ранее.\n      <br>\n      Для этого нам необходимо понять как происходит парсинг значения.\n      У парсера зарезервирован символ \".\", который отвечает за разделение уровней данных.\n      Если в пути используется символ \".\", то это означает, что теперь производим поиск ключа внутри данного значения: <b>parentKey.childrenKey</b>.\n    </p>\n    <p>\n      Из этого следует, что нам необходимо явно указывать путь до нашего значения, соблюдая все ключи массива.\n      В примере мы дошли до массива изображений, и тут встала задача получения значения ключа \"sdn\" у каждого изображения.\n      <br>\n      Метод <b>setChildren</b> сообщает парсеру, что нужно зайти в каждый элемент массива и достать из него значение.\n      Вложенные пути могут быть более сложными - допускается возможность указать N вложенность\n    </p>\n    <code-block :code=\"codeChildrenLvl\" />\n\n    <p>\n      Нам может потребоваться возможность получения только определенного значения внутри итерации.\n      <br>\n      Разберем пример, что перед нами стоит задача: получить путь только до первого изображения\n    </p>\n\n    <code-block :code=\"codeChildrenFirst\" />\n  </card-container>\n</template>","import script from \"./BasePage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./BasePage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport {defineProps, computed} from 'vue';\n\nconst props = defineProps({\n  path: {type: String, required: true}\n});\n\nconst href = computed(() => './api/' + props.path);\n</script>\n\n<template>\n  <a :href=\"href\" target=\"_blank\">\n    <slot></slot>\n  </a>\n</template>","import script from \"./ApiLink.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ApiLink.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport {defineProps, defineEmits} from 'vue';\nimport {useRoute} from \"vue-router\";\nimport {RouterLink} from \"vue-router\";\n\nconst route = useRoute();\nconst emit = defineEmits(['click']);\n\ndefineProps({\n  item: {type: Array, default: () => []}\n})\n\nconst to = (item) => {\n  return {\n    name: route.name,\n    params: {\n      hash: item.hash\n    }\n  };\n}\n\nconst click = (hash) => {\n  if (route.params.hash === hash) {\n    emit('click', hash);\n  }\n}\n</script>\n\n<template>\n  <li>\n    <router-link :to=\"to(item)\" @click=\"click(item.hash)\">{{item.title}}</router-link>\n\n    <ul v-if=\"item.children && item.children.length\">\n      <node-tree v-for=\"children in item.children\" :key=\"children.title\" :item=\"children\" @click=\"emit('click', $event)\"/>\n    </ul>\n  </li>\n</template>","import script from \"./NodeTree.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NodeTree.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport {defineProps, watch, onMounted} from 'vue';\nimport {useRoute} from \"vue-router\";\nimport NodeTree from \"@/components/table-contents/NodeTree.vue\";\n\nconst route = useRoute();\n\ndefineProps({\n  items: {type: Array, default: () => []},\n});\n\nonMounted(() => {\n  if (route.params?.hash) {\n    scroll(route.params.hash);\n  }\n})\n\nwatch(\n    () => route.path,\n    () => scroll(route.params.hash)\n)\nconst scroll = (hash) => {\n  setTimeout(\n      () => document.getElementById(hash)?.scrollIntoView({behavior: 'smooth'}),\n      400\n  )\n}\n</script>\n\n<template>\n  <ul class=\"table-contents\">\n    <node-tree v-for=\"row in items\" :key=\"row.title\" :item=\"row\" @click=\"scroll\"/>\n  </ul>\n</template>\n\n<style scoped>\n.table-contents li {\n  color: blue;\n  cursor: pointer;\n}\n\n.table-contents li:hover {\n  text-decoration: underline;\n  color: #0056b3;\n}\n</style>","import script from \"./TableContents.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TableContents.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TableContents.vue?vue&type=style&index=0&id=3bed10b0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3bed10b0\"]])\n\nexport default __exports__","<template>\n  <article class=\"mb-5\">\n    <header>\n      <slot name=\"header\"></slot>\n    </header>\n    <main>\n      <slot></slot>\n    </main>\n  </article>\n</template>","import { render } from \"./MainContainer.vue?vue&type=template&id=4d2547e7\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import script from \"./CodeBlock.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CodeBlock.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <section class=\"card mt-5 mb-5\">\n    <div class=\"card-body\">\n      <slot name=\"header\"></slot>\n      <div class=\"card-text\">\n        <slot></slot>\n      </div>\n    </div>\n  </section>\n</template>","import { render } from \"./CardContainer.vue?vue&type=template&id=0ec74814\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const isRight = '✅';\nexport const crossMark = '❌';","<template>\n  <div class=\"table-container\">\n    <table class=\"table table-bordered\">\n      <thead>\n        <slot name=\"head\"></slot>\n      </thead>\n      <tbody>\n        <slot></slot>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<style scoped>\n.table-container {\n  overflow: auto;\n}\n</style>","import { render } from \"./TableBlock.vue?vue&type=template&id=caef40ec&scoped=true\"\nconst script = {}\n\nimport \"./TableBlock.vue?vue&type=style&index=0&id=caef40ec&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-caef40ec\"]])\n\nexport default __exports__","<template>\n  <div class=\"alert alert-info mt-2\" role=\"alert\">\n    <p><b><slot name=\"header\"></slot></b></p>\n    <slot></slot>\n  </div>\n</template>","import { render } from \"./AlertMessage.vue?vue&type=template&id=7eca967e\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["mapBase","codeNormalize","codePreparation","codeChildren","isRight","crossMark","codeChildrenLvl","codeChildrenFirst","data","reactive","tableContents","title","hash","__exports__","props","__props","href","computed","path","route","useRoute","emit","__emit","to","item","name","params","click","onMounted","scroll","watch","setTimeout","document","getElementById","scrollIntoView","behavior","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","script","render","_hoisted_2","_hoisted_3","undefined","role"],"sourceRoot":""}