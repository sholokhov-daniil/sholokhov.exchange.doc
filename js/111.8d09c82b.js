"use strict";(self["webpackChunkdocumentation"]=self["webpackChunkdocumentation"]||[]).push([[111],{1111:function(n,e,l){l.r(e),l.d(e,{default:function(){return v}});var t=l(6768),a=l(144),u=l(2241),r=l(1260),s=l(7753);const d="\nuse Sholokhov\\Exchange\\Fields\\Field;\n\n$source = [\n    [\n        'name' => 'Название элемента',\n        'price' => 15.2\n    ],\n    [\n        'name' => 'Еще какой-то товар',\n        'price' => 17.2,\n    ],\n    [\n        'name' => 'Хороший товар',\n        'price' => 15.2,\n        'image' => 'https://example/upload/image.png'\n    ]\n];\n\n$map = [\n    (new Field)\n        ->setFrom('name')\n        ->setTo('NAME')\n        ->setPrimary(),\n    (new Field)\n        ->setFrom('image')\n        ->setTo('PREVIEW_PICTURE')\n];\n\n$exchange->setMap($map);\n",i="\nuse Sholokhov\\Exchange\\Fields\\Field;\nuse Sholokhov\\Exchange\\Fields\\FieldInterface;\n\n$data = [\n    [\n        'user' => 'Иванов|34 года',\n    ],\n    [\n        'user' => 'Пупкин|18'\n    ]\n];\n\n$nameField = new Field;\n$nameField->setFrom('user');\n$nameField->setTo('USER')\n$nameField->setNormalizer(fn(mixed $value, FieldInterface $field) => stristr($value, '|', true));\n",o="\nuse Sholokhov\\Exchange\\Fields\\Field;\nuse Sholokhov\\Exchange\\Messages\\Type\\DataResult;\n\nuse Bitrix\\Main\\Error;\nuse Bitrix\\Main\\Web\\HttpClient;\n\n\n$field->setPreparation(function(mixed $value, FieldInterface $field) {\n    $result = new DataResult;\n    $url = 'https://myweb.com/upload/' . $value;\n    \n    $options = [\n        'headers' => [\n            'Authorization: OAuth MYToken'\n        ]\n    ];\n    \n    $http = new HttpClient($options);\n    $tmp = CFile::GetTempName('', 'tmp.' . md5(mt_rand())); \n    \n    if ($http->download($url, $tmp)) {\n        $result->setData(\n            CFile::MakeFileArray($tmp)\n        );\n    } else {\n        $result->addError(new Error('Ошибка получения изображения: ' . $url));\n    }\n    \n    return $result;\n});\n",c=`\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => 'https://web.ru/upload/1.png',\n                    'name' => '1.png',\n                ],\n                [   \n                    'sdn' => 'https://web.ru/upload/2.png',\n                    'name' => '2.png'\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n// ${s.F} Работает \n$field = new Field;\n$field->setFrom('images.image');\n$field->setChildren(\n    (new Field)->setFrom('sdn')\n);\n\n// ${s.g} Не работает\n$field = new Field;\n$field->setFrom('images.image.sdn');\n`,k="\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => [\n                        [\n                            'path' => 'https://web.ru/upload/1.png'\n                            'name' => '1.png',\n                        ]\n                    ]\n                ],\n                [   \n                    'sdn' => [\n                        [\n                            'path' => 'https://web.ru/upload/2.png'\n                            'name' => '2.png',\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n$field = new Field;\n$field->setFrom('images.image');\n$field->setChildren(\n    (new Field)\n        ->setFrom('sdn')\n        ->setChildren(\n            (new Field)\n                ->setFrom('path')\n        )\n);\n",h="\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => 'https://web.ru/upload/1.png',\n                    'name' => '1.png',\n                ],\n                [   \n                    'sdn' => 'https://web.ru/upload/2.png',\n                    'name' => '2.png'\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n$field = new Field;\n// т.к. в image хранится перечисляемый массив, то нам достаточно указать номер ключа\n$field->setFrom('images.image.0.sdn');\n";var p=l(2462),m=l(8522),L=l(1332),f=l(8394),F=l(4039),b={__name:"BasePage",setup(n){const e=(0,a.Kh)({tableContents:[{title:"Введение",hash:"start"},{title:"Структура",hash:"structure"},{title:"Нормализация",hash:"normalize"},{title:"Преобразователь",hash:"preparation"},{title:"Вложенность",hash:"depth"}]});return(n,l)=>{const s=(0,t.g2)("router-link");return(0,t.uX)(),(0,t.CE)(t.FK,null,[(0,t.bF)(u.A,null,{default:(0,t.k6)((()=>[l[0]||(l[0]=(0,t.Lk)("h1",null,"Маршрутизация обмена",-1)),(0,t.bF)(L.A,{items:e.tableContents},null,8,["items"])])),_:1}),(0,t.bF)(F.A,null,{default:(0,t.k6)((()=>[l[10]||(l[10]=(0,t.Lk)("h2",{id:"start"},"Введение",-1)),(0,t.Lk)("p",null,[l[3]||(l[3]=(0,t.eW)(" Карта обмена является неотъемлемый частью в успешном обмене. Карта позволяет связать данные из ")),(0,t.bF)(s,{to:{name:"source"}},{default:(0,t.k6)((()=>l[1]||(l[1]=[(0,t.eW)("источника")]))),_:1}),l[4]||(l[4]=(0,t.eW)(" со ")),(0,t.bF)(s,{to:{name:"import"}},{default:(0,t.k6)((()=>l[2]||(l[2]=[(0,t.eW)("сущностью")]))),_:1}),l[5]||(l[5]=(0,t.eW)(" в которую вставляются данные источника. "))]),(0,t.Lk)("p",null,[l[7]||(l[7]=(0,t.eW)(" Каждый класс описывающий свойство принимающее участие в обмене, должен реализовывать интерфейс ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-Exchange-Fields-FieldInterface.html"},{default:(0,t.k6)((()=>l[6]||(l[6]=[(0,t.eW)("FieldInterface")]))),_:1}),l[8]||(l[8]=(0,t.Lk)("br",null,null,-1)),l[9]||(l[9]=(0,t.eW)(" Разберем пример, который продемонстрирует легкость настройки. "))]),(0,t.bF)(p.A,{code:(0,a.R1)(d)},null,8,["code"]),l[11]||(l[11]=(0,t.Lk)("p",null,[(0,t.eW)(" Из примера можно заметить, что метод "),(0,t.Lk)("b",null,"setFrom"),(0,t.eW)(" отвечает за данные из источника данных, а метод "),(0,t.Lk)("b",null,"setIn"),(0,t.eW)(" за свойства, которые относятся к сущности в которую производим импорт. "),(0,t.Lk)("br"),(0,t.eW)(" Именно данная связь является основополагающей, для организации корректного обмена. Можем заметить, что в карте мы пытаемся получить изображения, но не у всех импортируемых элементов оно есть - тут нет нечего страшного, ведь он просто будет иметь пустое значение, и не вызовет исключение или иного отклонения в работе обмена. "),(0,t.Lk)("br"),(0,t.eW)(" Если вы внимательный читатель, то могли обратить внимание на сеттер "),(0,t.Lk)("b",null,"setPrimary"),(0,t.eW)(" - указывает, что данное поле является ключевым на основе которого будет происходит поиск других элементов, и приниматься решение необходимости добавления или обновления. ")],-1))])),_:1}),(0,t.bF)(F.A,null,{default:(0,t.k6)((()=>[l[26]||(l[26]=(0,t.Lk)("h2",{id:"structure"},"Структура",-1)),(0,t.Lk)("p",null,[l[13]||(l[13]=(0,t.eW)("Класс: ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-Exchange-Fields-Field.html"},{default:(0,t.k6)((()=>l[12]||(l[12]=[(0,t.eW)("Field")]))),_:1})]),l[27]||(l[27]=(0,t.Lk)("p",null," Класс описания имеет стандартный набор методов, позволяющий настроить взаимодействие между источником данных и сущностью в которую производится запись. Все стандартные классы описывающие свойство являются наследниками данного объекта. ",-1)),(0,t.bF)(f.A,null,{default:(0,t.k6)((()=>[l[18]||(l[18]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"Наименование"),(0,t.Lk)("td",null,"Обязательное"),(0,t.Lk)("td",null,"Тип данных"),(0,t.Lk)("td",null,"Описание")],-1)),l[19]||(l[19]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setPrimary"),(0,t.Lk)("td",null,[(0,t.Lk)("b",null,"Да")]),(0,t.Lk)("td",null,"boolean"),(0,t.Lk)("td",null,"Выступает в качестве идентификационного поля(связывает элементы сущности и элементы источника данных)")],-1)),l[20]||(l[20]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setFrom"),(0,t.Lk)("td",null,[(0,t.Lk)("b",null,"Да")]),(0,t.Lk)("td",null,"string"),(0,t.Lk)("td",null,'Путь до значения, которое вернул источник. Если путь является вложенным, то каждый уровень разделяется символом "."')],-1)),l[21]||(l[21]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setIn"),(0,t.Lk)("td",null,[(0,t.Lk)("b",null,"Да")]),(0,t.Lk)("td",null,"string"),(0,t.Lk)("td",null,"В какой ключ будет записываться значение из структуры данных источника")],-1)),l[22]||(l[22]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setPreparation"),(0,t.Lk)("td",null,"Нет"),(0,t.Lk)("td",null,[(0,t.Lk)("a",{href:"https://www.php.net/manual/ru/language.types.callable.php",target:"_blank"},"callable")]),(0,t.Lk)("td",null,"Пользовательский преобразователь значения текущего свойства")],-1)),(0,t.Lk)("tr",null,[l[15]||(l[15]=(0,t.Lk)("td",null,"setChildren",-1)),l[16]||(l[16]=(0,t.Lk)("td",null,"Нет",-1)),(0,t.Lk)("td",null,[(0,t.bF)(r.A,{path:"classes/Sholokhov-Exchange-Fields-FieldInterface.html"},{default:(0,t.k6)((()=>l[14]||(l[14]=[(0,t.eW)("FieldInterface")]))),_:1})]),l[17]||(l[17]=(0,t.Lk)("td",null,"Указывает путь до вложенного значения. Предназначен, для получения значения внутри итерируемых элементов",-1))]),l[23]||(l[23]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setNormalizer"),(0,t.Lk)("td",null,"Нет"),(0,t.Lk)("td",null,[(0,t.Lk)("a",{href:"https://www.php.net/manual/ru/language.types.callable.php",target:"_blank"},"callable")]),(0,t.Lk)("td",null,' Указываем произвольный нормализатор значения - используется перед преобразованием значения на основе настроек сущности. Данный метод может подойти, если нам из источника приходят "грязные" данные. Пример: из источника приходит строка "Иванов|34 года", а нам для импорта нужен только "Иванов". Наш нормализатор произведет форматирование значения к нужному формату ')],-1))])),_:1}),(0,t.bF)(m.A,null,{header:(0,t.k6)((()=>l[24]||(l[24]=[(0,t.eW)(" Внимание! ")]))),default:(0,t.k6)((()=>[l[25]||(l[25]=(0,t.Lk)("p",null,[(0,t.eW)("В карте должно быть только одно свойство, которое выступает идентификационным "),(0,t.Lk)("b",null,"(setPrimary)")],-1))])),_:1})])),_:1}),(0,t.bF)(F.A,null,{default:(0,t.k6)((()=>[l[31]||(l[31]=(0,t.Lk)("h2",{id:"normalize"},"Нормализация значения",-1)),l[32]||(l[32]=(0,t.Lk)("p",null,[(0,t.eW)(' Рассмотрим пример использования пользовательского обработчика значений, в поле "user" хранятся значения формата '),(0,t.Lk)("b",null,"{фамилия}|{возраст}"),(0,t.eW)(". В рамках данной задачи нам необходимо из этой строки получить фамилию. "),(0,t.Lk)("br"),(0,t.eW)(" Наш нормализатор получает 2 входных параметра: ")],-1)),(0,t.Lk)("ul",null,[l[30]||(l[30]=(0,t.Lk)("li",null,"Значение, которое необходимо нормализовать (может иметь любой тип данных)",-1)),(0,t.Lk)("li",null,[l[29]||(l[29]=(0,t.eW)("Свойство, значение которого нормализуем. Оно имеет тип данных ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-Exchange-Fields-FieldInterface.html"},{default:(0,t.k6)((()=>l[28]||(l[28]=[(0,t.eW)("FieldInterface")]))),_:1})])]),(0,t.bF)(p.A,{code:(0,a.R1)(i)},null,8,["code"])])),_:1}),(0,t.bF)(F.A,null,{default:(0,t.k6)((()=>[l[37]||(l[37]=(0,t.Lk)("h2",{id:"preparation"},"Преобразователь значения",-1)),(0,t.Lk)("p",null,[l[34]||(l[34]=(0,t.eW)(" Каждое свойство наделено возможностью указания собственного преобразователя данных, если значение необходимо обработать уникальным подходом и игнорировать альтернативные решения. Указав свойству собственный нормализатор, в таком случае все зарегистрированные нормализаторы внутри обмена игнорируются. ")),l[35]||(l[35]=(0,t.Lk)("br",null,null,-1)),l[36]||(l[36]=(0,t.eW)(" Результатом работы нормализатора служит объект реализующий интерфейс ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-Exchange-Messages-DataResultInterface.html"},{default:(0,t.k6)((()=>l[33]||(l[33]=[(0,t.eW)("DataResultInterface")]))),_:1})]),l[38]||(l[38]=(0,t.Lk)("h4",null,"Пример",-1)),l[39]||(l[39]=(0,t.Lk)("p",null,[(0,t.eW)(" Перед нами стоит цель: создать собственный преобразователь значения типа файл. В качестве значения нам передается символьный код, который позволяет получить изображение из внешнего ресурса. "),(0,t.Lk)("br"),(0,t.eW)(" Может показаться, что можно использовать нормализатор данных, но нормализатор предназначен, для форматирования значения. В нашем примере помимо преобразования пути предстоит произвести http запрос и скачать изображение, предварительно сохранив в файловой системе сервера. Согласитесь, довольно много обязанностей, для обычного форматирования. ")],-1)),(0,t.bF)(p.A,{code:(0,a.R1)(o)},null,8,["code"])])),_:1}),(0,t.bF)(F.A,null,{default:(0,t.k6)((()=>[l[40]||(l[40]=(0,t.Lk)("h2",{id:"depth"},"Вложенный путь",-1)),l[41]||(l[41]=(0,t.Lk)("p",null," В некоторых случаях нам может потребоваться получить значения внутри итерируемого объекта. Рассмотрим пример на массиве, где нужно получить путь до изображения ",-1)),(0,t.bF)(p.A,{code:(0,a.R1)(c)},null,8,["code"]),l[42]||(l[42]=(0,t.Lk)("p",null,[(0,t.eW)(" Разберем более подробно пример приведенный ранее. "),(0,t.Lk)("br"),(0,t.eW)(' Для этого нам необходимо понять как происходит парсинг значения. У парсера зарезервирован символ ".", который отвечает за разделение уровней данных. Если в пути используется символ ".", то это означает, что теперь производим поиск ключа внутри данного значения: '),(0,t.Lk)("b",null,"parentKey.childrenKey"),(0,t.eW)(". ")],-1)),l[43]||(l[43]=(0,t.Lk)("p",null,[(0,t.eW)(' Из этого следует, что нам необходимо явно указывать путь до нашего значения, соблюдая все ключи массива. В примере мы дошли до массива изображений, и тут встала задача получения значения ключа "sdn" у каждого изображения. '),(0,t.Lk)("br"),(0,t.eW)(" Метод "),(0,t.Lk)("b",null,"setChildren"),(0,t.eW)(" сообщает парсеру, что нужно зайти в каждый элемент массива и достать из него значение. Вложенные пути могут быть более сложными - допускается возможность указать N вложенность ")],-1)),(0,t.bF)(p.A,{code:(0,a.R1)(k)},null,8,["code"]),l[44]||(l[44]=(0,t.Lk)("p",null,[(0,t.eW)(" Нам может потребоваться возможность получения только определенного значения внутри итерации. "),(0,t.Lk)("br"),(0,t.eW)(" Разберем пример, что перед нами стоит задача: получить путь только до первого изображения ")],-1)),(0,t.bF)(p.A,{code:(0,a.R1)(h)},null,8,["code"])])),_:1})],64)}}};const g=b;var v=g},1260:function(n,e,l){l.d(e,{A:function(){return s}});var t=l(6768);const a=["href"];var u={__name:"ApiLink",props:{path:{type:String,required:!0}},setup(n){const e=n,l=(0,t.EW)((()=>"./api/"+e.path));return(n,e)=>((0,t.uX)(),(0,t.CE)("a",{href:l.value,target:"_blank"},[(0,t.RG)(n.$slots,"default")],8,a))}};const r=u;var s=r},1332:function(n,e,l){l.d(e,{A:function(){return m}});var t=l(6768),a=l(1387),u=l(144),r=l(4232);const s={key:0};var d={__name:"NodeTree",props:{item:{type:Array,default:()=>[]}},emits:["click"],setup(n,{emit:e}){const l=(0,a.lq)(),d=e,i=n=>({name:l.name,params:{hash:n.hash}}),o=n=>{l.params.hash===n&&d("click",n)};return(e,l)=>{const c=(0,t.g2)("node-tree",!0);return(0,t.uX)(),(0,t.CE)("li",null,[(0,t.bF)((0,u.R1)(a.Wk),{to:i(n.item),onClick:l[0]||(l[0]=e=>o(n.item.hash))},{default:(0,t.k6)((()=>[(0,t.eW)((0,r.v_)(n.item.title),1)])),_:1},8,["to"]),n.item.children&&n.item.children.length?((0,t.uX)(),(0,t.CE)("ul",s,[((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(n.item.children,(n=>((0,t.uX)(),(0,t.Wv)(c,{key:n.title,item:n,onClick:l[1]||(l[1]=n=>d("click",n))},null,8,["item"])))),128))])):(0,t.Q3)("",!0)])}}};const i=d;var o=i;const c={class:"table-contents"};var k={__name:"TableContents",props:{items:{type:Array,default:()=>[]}},setup(n){const e=(0,a.lq)();(0,t.sV)((()=>{e.params?.hash&&l(e.params.hash)})),(0,t.wB)((()=>e.path),(()=>l(e.params.hash)));const l=n=>{setTimeout((()=>document.getElementById(n)?.scrollIntoView({behavior:"smooth"})),400)};return(e,a)=>((0,t.uX)(),(0,t.CE)("ul",c,[((0,t.uX)(!0),(0,t.CE)(t.FK,null,(0,t.pI)(n.items,(n=>((0,t.uX)(),(0,t.Wv)(o,{key:n.title,item:n,onClick:l},null,8,["item"])))),128))]))}},h=l(1241);const p=(0,h.A)(k,[["__scopeId","data-v-3bed10b0"]]);var m=p},2241:function(n,e,l){l.d(e,{A:function(){return i}});var t=l(6768);const a={class:"mb-5"};function u(n,e){return(0,t.uX)(),(0,t.CE)("article",a,[(0,t.Lk)("header",null,[(0,t.RG)(n.$slots,"header")]),(0,t.Lk)("main",null,[(0,t.RG)(n.$slots,"default")])])}var r=l(1241);const s={},d=(0,r.A)(s,[["render",u]]);var i=d},2462:function(n,e,l){l.d(e,{A:function(){return d}});var t=l(6768),a=l(144),u=l(6678),r={__name:"CodeBlock",props:{code:{type:String,required:!0},lang:{type:String,default:()=>"php"}},setup(n){return(e,l)=>((0,t.uX)(),(0,t.Wv)((0,a.R1)(u.Pp),(0,t.v6)({code:n.code,lang:n.lang,highlightjs:"",theme:"stackoverflow-dark"},e.$attrs),null,16,["code","lang"]))}};const s=r;var d=s},4039:function(n,e,l){l.d(e,{A:function(){return c}});var t=l(6768);const a={class:"card mt-5 mb-5"},u={class:"card-body"},r={class:"card-text"};function s(n,e){return(0,t.uX)(),(0,t.CE)("section",a,[(0,t.Lk)("div",u,[(0,t.RG)(n.$slots,"header"),(0,t.Lk)("div",r,[(0,t.RG)(n.$slots,"default")])])])}var d=l(1241);const i={},o=(0,d.A)(i,[["render",s]]);var c=o},7753:function(n,e,l){l.d(e,{F:function(){return t},g:function(){return a}});const t="✅",a="❌"},8394:function(n,e,l){l.d(e,{A:function(){return o}});var t=l(6768);const a={class:"table-container"},u={class:"table table-bordered"};function r(n,e){return(0,t.uX)(),(0,t.CE)("div",a,[(0,t.Lk)("table",u,[(0,t.Lk)("thead",null,[(0,t.RG)(n.$slots,"head",{},void 0,!0)]),(0,t.Lk)("tbody",null,[(0,t.RG)(n.$slots,"default",{},void 0,!0)])])])}var s=l(1241);const d={},i=(0,s.A)(d,[["render",r],["__scopeId","data-v-caef40ec"]]);var o=i},8522:function(n,e,l){l.d(e,{A:function(){return i}});var t=l(6768);const a={class:"alert alert-info mt-2",role:"alert"};function u(n,e){return(0,t.uX)(),(0,t.CE)("div",a,[(0,t.Lk)("p",null,[(0,t.Lk)("b",null,[(0,t.RG)(n.$slots,"header")])]),(0,t.RG)(n.$slots,"default")])}var r=l(1241);const s={},d=(0,r.A)(s,[["render",u]]);var i=d}}]);
//# sourceMappingURL=111.8d09c82b.js.map