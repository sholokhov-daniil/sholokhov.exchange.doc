"use strict";(self["webpackChunkdocumentation"]=self["webpackChunkdocumentation"]||[]).push([[895],{1260:function(n,e,t){t.d(e,{A:function(){return u}});var l=t(6768);const o=["href"];var r={__name:"ApiLink",props:{path:{type:String,required:!0}},setup(n){const e=n,t=(0,l.EW)((()=>"./api/"+e.path));return(n,e)=>((0,l.uX)(),(0,l.CE)("a",{href:t.value,target:"_blank"},[(0,l.RG)(n.$slots,"default")],8,o))}};const a=r;var u=a},2241:function(n,e,t){t.d(e,{A:function(){return s}});var l=t(6768);const o={class:"mb-5"};function r(n,e){return(0,l.uX)(),(0,l.CE)("article",o,[(0,l.Lk)("header",null,[(0,l.RG)(n.$slots,"header")]),(0,l.Lk)("main",null,[(0,l.RG)(n.$slots,"default")])])}var a=t(1241);const u={},c=(0,a.A)(u,[["render",r]]);var s=c},2462:function(n,e,t){t.d(e,{A:function(){return c}});var l=t(6768),o=t(144),r=t(6678),a={__name:"CodeBlock",props:{code:{type:String,required:!0},lang:{type:String,default:()=>"php"}},setup(n){return(e,t)=>((0,l.uX)(),(0,l.Wv)((0,o.R1)(r.Pp),(0,l.v6)({code:n.code,lang:n.lang,highlightjs:"",theme:"stackoverflow-dark"},e.$attrs),null,16,["code","lang"]))}};const u=a;var c=u},4039:function(n,e,t){t.d(e,{A:function(){return d}});var l=t(6768);const o={class:"card mt-5 mb-5"},r={class:"card-body"},a={class:"card-text"};function u(n,e){return(0,l.uX)(),(0,l.CE)("section",o,[(0,l.Lk)("div",r,[(0,l.RG)(n.$slots,"header"),(0,l.Lk)("div",a,[(0,l.RG)(n.$slots,"default")])])])}var c=t(1241);const s={},i=(0,c.A)(s,[["render",u]]);var d=i},7753:function(n,e,t){t.d(e,{F:function(){return l},g:function(){return o}});const l="✅",o="❌"},8522:function(n,e,t){t.d(e,{A:function(){return s}});var l=t(6768);const o={class:"alert alert-info mt-2",role:"alert"};function r(n,e){return(0,l.uX)(),(0,l.CE)("div",o,[(0,l.Lk)("p",null,[(0,l.Lk)("b",null,[(0,l.RG)(n.$slots,"header")])]),(0,l.RG)(n.$slots,"default")])}var a=t(1241);const u={},c=(0,a.A)(u,[["render",r]]);var s=c},9895:function(n,e,t){t.r(e),t.d(e,{default:function(){return L}});var l=t(6768),o=t(144),r=t(2241),a=t(1260),u=t(4039),c=t(2462),s=t(7753);const i='\nuse Sholokhov\\Exchange\\Source\\Xml;\n\n$source = new Xml(\'https:\\\\my-web.com\');\n\nforeach($source as $value) {\n    echo "<pre>";\n    var_dump($value);\n    echo "</pre>";\n}\n',d='\n<?xml version="1.0"?>\n<data>\n    <items>\n        <item id="15">\n            <name>Тут название</name>\n            <color id="33">Черный</color>\n        </item>\n        <item>\n            <name>Тут название2</name>\n            <color id="12">Белый</color>\n        </item>\n    </items>\n</data>\n',m="\nuse Sholokhov\\Exchange\\Source\\Xml;\n\n$source = new Xml('https:\\\\my-web.com');\n$source->setRootTag('items');\n\nforeach($source as $value) {\n    echo \"<pre>\";\n    var_dump($value);\n    echo \"</pre>\";\n}\n",k='\narray(4) {\n  ["item_attribute_id"]=>\n  string(2) "15"\n  ["item_name"]=>\n  string(23) "Тут название"\n  ["item_color"]=>\n  string(12) "Черный"\n  ["item_color_attribute_id"]=>\n  string(2) "33"\n}\n\narray(3) {\n  ["item_name"]=>\n  string(24) "Тут название2"\n  ["item_color"]=>\n  string(10) "Белый"\n  ["item_color_attribute_id"]=>\n  string(2) "12"\n}\n',p='\n<?xml version="1.0"?>\n<data>\n    <handbook>\n        <catalog>\n            <items>\n                <item id="15">\n                    <name>Тут название</name>\n                    <color id="33">Черный</color>\n                </item>\n                <item>\n                    <name>Тут название2</name>\n                    <color id="12">Белый</color>\n                </item>\n            </items>\n        </catalog>\n    </handbook>\n</data>\n',h="\nuse Sholokhov\\Exchange\\Source\\Xml;\n\n$source = new Xml('https:\\\\my-web.com');\n$source->setRootTag('items');\n$source->setRootTagDepth(3);\n\nforeach($source as $value) {\n    echo \"<pre>\";\n    var_dump($value);\n    echo \"</pre>\";\n}\n",b='\narray(4) {\n  ["item_attribute_id"]=>\n  string(2) "15"\n  ["item_name"]=>\n  string(23) "Тут название"\n  ["item_color"]=>\n  string(12) "Черный"\n  ["item_color_attribute_id"]=>\n  string(2) "33"\n}\narray(3) {\n  ["item_name"]=>\n  string(24) "Тут название2"\n  ["item_color"]=>\n  string(10) "Белый"\n  ["item_color_attribute_id"]=>\n  string(2) "12"\n}\n',g=`\n// ${s.F} Хорошо\n$source->setRootTag('items');\n$source->setRootTagDepth(3);\n$exchange->execute($source);\n\n\n// ${s.g} Плохо\n$source->setRootTag('items');\n$exchange->execute($source);\n`;var _=t(8522),f={__name:"XmlPage",setup(n){return(n,e)=>{const t=(0,l.g2)("router-link");return(0,l.uX)(),(0,l.CE)(l.FK,null,[(0,l.bF)(r.A,null,{default:(0,l.k6)((()=>[e[2]||(e[2]=(0,l.Lk)("h1",null,"Источник данных из XML",-1)),(0,l.Lk)("p",null,[e[1]||(e[1]=(0,l.eW)(" Класс: ")),(0,l.bF)(a.A,{path:"classes/classes/Sholokhov-Exchange-Source-Xml.html"},{default:(0,l.k6)((()=>e[0]||(e[0]=[(0,l.eW)("Xml")]))),_:1})])])),_:1}),(0,l.bF)(u.A,null,{default:(0,l.k6)((()=>[e[14]||(e[14]=(0,l.Lk)("h2",null,"Введение",-1)),(0,l.Lk)("p",null,[e[4]||(e[4]=(0,l.eW)(" Источник данных предназначен, для преобразования из XML в массив и передаче обмену. ")),e[5]||(e[5]=(0,l.Lk)("br",null,null,-1)),e[6]||(e[6]=(0,l.eW)(" Текущий источник данных является более медленным по сравнению с ")),(0,l.bF)(t,{to:{name:"source-simple-xml"}},{default:(0,l.k6)((()=>e[3]||(e[3]=[(0,l.eW)("SimpleXml")]))),_:1}),e[7]||(e[7]=(0,l.eW)(", но может работать с любым объемом данных. ")),e[8]||(e[8]=(0,l.Lk)("br",null,null,-1)),e[9]||(e[9]=(0,l.eW)(" Чтение XML файла идет по строкам, а результат чтения записывается таблицы, уже после этого идет взаимодействия с базой данных, и не приходится держать в памяти весь файл. ")),e[10]||(e[10]=(0,l.Lk)("br",null,null,-1)),e[11]||(e[11]=(0,l.eW)(" Для хранения данных создается уникальная таблица, а по окончанию работы удаляется, если произошло экстренное прерывание выполнения php скрипта, то библиотека использует агентов, которые производят мониторинг динамических таблиц. "))]),e[15]||(e[15]=(0,l.Lk)("p",null,[(0,l.eW)(" Источник данных использует стандартный парсер битрикса "),(0,l.Lk)("a",{href:"https://dev.1c-bitrix.ru/api_help/iblock/classes/ciblockxmlfile/index.php",target:"_blank"},"CIBlockXMLFile")],-1)),(0,l.bF)(_.A,null,{header:(0,l.k6)((()=>e[12]||(e[12]=[(0,l.eW)(" Внимание ")]))),default:(0,l.k6)((()=>[e[13]||(e[13]=(0,l.eW)(" Для работы необходимо наличие установленного штатного модуля iblock "))])),_:1})])),_:1}),(0,l.bF)(u.A,null,{default:(0,l.k6)((()=>[e[16]||(e[16]=(0,l.Lk)("h2",null,"Конфигурация",-1)),e[17]||(e[17]=(0,l.Lk)("p",null," При инициализации объекта в конструктор мы обязаны указать путь до xml файла. Разберем пример инициализации источника данных ",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(i)},null,8,["code"]),e[18]||(e[18]=(0,l.Lk)("p",null,[(0,l.eW)(" Может потребоваться получить данные из определенной точки xml, для этого необходимо указать путь через "),(0,l.Lk)("b",null,"setRootTag"),(0,l.Lk)("br"),(0,l.eW)(" Рассмотрим пример получения значения из атрибута item ")],-1)),e[19]||(e[19]=(0,l.Lk)("p",null,"Формат данных",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(d)},null,8,["code"]),e[20]||(e[20]=(0,l.Lk)("p",null,"Создание источника",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(m)},null,8,["code"]),e[21]||(e[21]=(0,l.Lk)("p",null,"Результат",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(k)},null,8,["code"]),e[22]||(e[22]=(0,l.Lk)("p",null,[(0,l.eW)(' Текущий источник данных имеет собственный синтаксис указания пути до размещения корня данных. В большинстве случаев вложенный путь указывается через символ ".", но в данном случае указываем нужный тег и уровень вложенности. '),(0,l.Lk)("br"),(0,l.eW)(" Рассмотрим пример получения данных из более глубокого размещения ")],-1)),e[23]||(e[23]=(0,l.Lk)("p",null,"Формат данных",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(p)},null,8,["code"]),e[24]||(e[24]=(0,l.Lk)("p",null,"Создание источника",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(h)},null,8,["code"]),e[25]||(e[25]=(0,l.Lk)("p",null,"Результат",-1)),(0,l.bF)(c.A,{code:(0,o.R1)(b)},null,8,["code"]),e[26]||(e[26]=(0,l.Lk)("p",null,[(0,l.eW)(" Можно было заметить, что мы использовали метод "),(0,l.Lk)("b",null,"setRootTagDepth"),(0,l.eW)(". Данный метод предназначен, для указания коревого уровня вложенности, чтобы избежать ошибок определения. "),(0,l.Lk)("br"),(0,l.eW)(" Парсер битрикса не учитывает вложенность и подразумевает, что каждый тег уникальный, и не может размещаться в разных местах XML файла. Если мы не укажем уровень вложенности, то будет производиться глобальный поиск по всему XML файлу ")],-1)),(0,l.bF)(c.A,{code:(0,o.R1)(g)},null,8,["code"])])),_:1})],64)}}};const v=f;var L=v}}]);
//# sourceMappingURL=895.48197162.js.map