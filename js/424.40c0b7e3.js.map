{"version":3,"file":"js/424.40c0b7e3.js","mappings":"gQAGA,MAAMA,EAAQC,EAIRC,GAAOC,EAAAA,EAAAA,KAAS,IAAM,SAAWH,EAAMI,O,4GCJ7C,MAAMC,EAAc,EAEpB,O,sNCAA,MAAMC,GAAQC,EAAAA,EAAAA,MACRC,EAAOC,EAMPC,EAAMC,IACH,CACLC,KAAMN,EAAMM,KACZC,OAAQ,CACNC,KAAMH,EAAKG,QAKXC,EAASD,IACTR,EAAMO,OAAOC,OAASA,GACxBN,EAAK,QAASM,EAChB,E,qfCrBF,MAAMT,EAAc,EAEpB,Q,kHCAA,MAAMC,GAAQC,EAAAA,EAAAA,OAMdS,EAAAA,EAAAA,KAAU,KACJV,EAAMO,QAAQC,MAChBG,EAAOX,EAAMO,OAAOC,KACtB,KAGFI,EAAAA,EAAAA,KACI,IAAMZ,EAAMF,OACZ,IAAMa,EAAOX,EAAMO,OAAOC,QAE9B,MAAMG,EAAUH,IACdK,YACI,IAAMC,SAASC,eAAeP,IAAOQ,eAAe,CAACC,SAAU,YAC/D,IACH,E,+LCnBH,MAAM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O,yHCRO,MAAMC,EAAe,4kBAkCfC,EAAoB,0gBAkBpBC,EAA0B,m3BA6B1BC,EAAoB,oTAcpBC,EAAc,6JASdC,EAAiB,8bAiBjBC,EAAuB,8RAYvBC,EAAiB,iTAYjBC,EAAW,uN,mEChIxB,MAAMC,GAAOC,EAAAA,EAAAA,IAAS,CACpBC,cAAe,CACb,CACEC,MAAO,eACPtB,KAAM,iBAER,CACEsB,MAAO,SACPtB,KAAM,WAER,CACEsB,MAAO,UACPtB,KAAM,SACNuB,SAAU,CACR,CACED,MAAO,qCACPtB,KAAM,iBAER,CACEsB,MAAO,oCACPtB,KAAM,gBAER,CACEsB,MAAO,kCACPtB,KAAM,cAER,CACEsB,MAAO,iCACPtB,KAAM,kB,u1WC1ChB,MAAMT,EAAc,EAEpB,O,uWCFA,MAAMA,EAAc,EAEpB,O,8ECJWiC,MAAM,kB,GACRA,MAAM,a,GAEJA,MAAM,a,kCAHfC,EAAAA,EAAAA,IAOU,UAPVC,EAOU,EANRC,EAAAA,EAAAA,IAKM,MALNC,EAKM,EAJJC,EAAAA,EAAAA,IAA2BC,EAAAC,OAAA,WAC3BJ,EAAAA,EAAAA,IAEM,MAFNK,EAEM,EADJH,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,gB,eCJrB,MAAME,EAAS,CAAC,EAGV1C,GAA2B,OAAgB0C,EAAQ,CAAC,CAAC,SAASC,KAEpE,O,8ECLOV,MAAM,mB,GACFA,MAAM,wB,kCADfC,EAAAA,EAAAA,IASM,MATNC,EASM,EARJC,EAAAA,EAAAA,IAOQ,QAPRC,EAOQ,EANND,EAAAA,EAAAA,IAEQ,eADNE,EAAAA,EAAAA,IAAyBC,EAAAC,OAAA,eAAAI,GAAA,MAE3BR,EAAAA,EAAAA,IAEQ,eADNE,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,kBAAAI,GAAA,Q,eCNrB,MAAMF,EAAS,CAAC,EAKV1C,GAA2B,OAAgB0C,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O,8ECPOV,MAAM,wBAAwBY,KAAK,S,kCAAxCX,EAAAA,EAAAA,IAGM,MAHNC,EAGM,EAFJC,EAAAA,EAAAA,IAAyC,WAAtCA,EAAAA,EAAAA,IAAkC,WAA/BE,EAAAA,EAAAA,IAA2BC,EAAAC,OAAA,eACjCF,EAAAA,EAAAA,IAAaC,EAAAC,OAAA,Y,eCFjB,MAAME,EAAS,CAAC,EAGV1C,GAA2B,OAAgB0C,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://documentation/./src/components/link/ApiLink.vue","webpack://documentation/./src/components/link/ApiLink.vue?8ca0","webpack://documentation/./src/components/table-contents/NodeTree.vue","webpack://documentation/./src/components/table-contents/NodeTree.vue?2300","webpack://documentation/./src/components/table-contents/TableContents.vue","webpack://documentation/./src/components/table-contents/TableContents.vue?aea1","webpack://documentation/./src/data/codes/php/target/import/hl/element/index.js","webpack://documentation/./src/pages/target/import/hl/ElementPage.vue","webpack://documentation/./src/pages/target/import/hl/ElementPage.vue?a2d5","webpack://documentation/./src/components/block-code/CodeBlock.vue","webpack://documentation/./src/components/container/CardContainer.vue","webpack://documentation/./src/components/container/CardContainer.vue?f5d0","webpack://documentation/./src/components/table/TableBlock.vue","webpack://documentation/./src/components/table/TableBlock.vue?792d","webpack://documentation/./src/components/messages/AlertMessage.vue","webpack://documentation/./src/components/messages/AlertMessage.vue?6b34"],"sourcesContent":["<script setup>\nimport {defineProps, computed} from 'vue';\n\nconst props = defineProps({\n  path: {type: String, required: true}\n});\n\nconst href = computed(() => './api/' + props.path);\n</script>\n\n<template>\n  <a :href=\"href\" target=\"_blank\">\n    <slot></slot>\n  </a>\n</template>","import script from \"./ApiLink.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ApiLink.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport {defineProps, defineEmits} from 'vue';\nimport {useRoute} from \"vue-router\";\nimport {RouterLink} from \"vue-router\";\n\nconst route = useRoute();\nconst emit = defineEmits(['click']);\n\ndefineProps({\n  item: {type: Array, default: () => []}\n})\n\nconst to = (item) => {\n  return {\n    name: route.name,\n    params: {\n      hash: item.hash\n    }\n  };\n}\n\nconst click = (hash) => {\n  if (route.params.hash === hash) {\n    emit('click', hash);\n  }\n}\n</script>\n\n<template>\n  <li>\n    <router-link :to=\"to(item)\" @click=\"click(item.hash)\">{{item.title}}</router-link>\n\n    <ul v-if=\"item.children && item.children.length\">\n      <node-tree v-for=\"children in item.children\" :key=\"children.title\" :item=\"children\" @click=\"emit('click', $event)\"/>\n    </ul>\n  </li>\n</template>","import script from \"./NodeTree.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NodeTree.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\nimport {defineProps, watch, onMounted} from 'vue';\nimport {useRoute} from \"vue-router\";\nimport NodeTree from \"@/components/table-contents/NodeTree.vue\";\n\nconst route = useRoute();\n\ndefineProps({\n  items: {type: Array, default: () => []},\n});\n\nonMounted(() => {\n  if (route.params?.hash) {\n    scroll(route.params.hash);\n  }\n})\n\nwatch(\n    () => route.path,\n    () => scroll(route.params.hash)\n)\nconst scroll = (hash) => {\n  setTimeout(\n      () => document.getElementById(hash)?.scrollIntoView({behavior: 'smooth'}),\n      400\n  )\n}\n</script>\n\n<template>\n  <ul class=\"table-contents\">\n    <node-tree v-for=\"row in items\" :key=\"row.title\" :item=\"row\" @click=\"scroll\"/>\n  </ul>\n</template>\n\n<style scoped>\n.table-contents li {\n  color: blue;\n  cursor: pointer;\n}\n\n.table-contents li:hover {\n  text-decoration: underline;\n  color: #0056b3;\n}\n</style>","import script from \"./TableContents.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TableContents.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TableContents.vue?vue&type=style&index=0&id=3bed10b0&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-3bed10b0\"]])\n\nexport default __exports__","export const exampleStart = `\nuse Sholokhov\\\\Exchange\\\\Fields\\\\Field;\nuse Sholokhov\\\\Exchange\\\\Target\\\\Highloadblock\\\\Element;\n\n$data = [\n    [\n        'code' => 'black',\n        'title' => 'Черный'\n    ],\n    [\n        'code' => 'white',\n        'title' => 'Белый'\n    ]\n];\n\n$map = [\n    (new Field)\n        ->setFrom('code')\n        ->setTo('UF_XML_ID')\n        ->setPrimary(),\n    (new Field)\n        ->setFrom('title'),\n        ->setTo('UF_NAME'),\n];\n\n$options = [\n    'entity_id' => 1,\n];\n\n$exchange = new Element($options);\n$exchange->setMap($map);\n$exchange->execute($data);\n`;\n\nexport const modifBefureUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeHighloadblockElementUpdate',\n    function(Event $event) {\n        $parameters = &$event->getParameters();\n        $parameters['fields']['FIELDS']['NAME'] = 'Теперь такое название';\n        $parameters['fields']['PROPERTIES']['VIN'] = '.....';\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\n\nexport const medifBeforeUpdateCancel = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nuse Sholokhov\\\\Exchange\\\\Target\\\\UserFields\\\\Enumeration;\nuse Sholokhov\\\\Exchange\\\\Exception\\\\Target\\\\ExchangeItemStoppedException;\n\n/**\n *  Отмена изменения элемента нужного свойства нужной сущности \n *  и записью в лог стандартного(системного) сообщения\n**/\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeHighloadblockElementUpdate',\n    function(Event $event) {\n        /** @var $exchange Enumeration **/\n        $exchange = $event->getParameter('exchange');\n        $parameters = $event->getParameters();\n        \n        if ($exchange->getHlID() === 1) {\n            throw new ExchangeItemStoppedException('Так захотелось');\n        }\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\n\nexport const errorBeforeUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeHighloadblockElementUpdate',\n    fn() => new EventResult(EventResult::ERROR, ['errors' => ['Ошибка 1', 'Ошибка 2']])\n);\n`;\n\n\n\nexport const afterUpdate = `\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onAfterHighloadblockElementUpdate',\n    fn() => CEvent::Send(....)\n);\n`;\n\n\nexport const modifBeforeAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeHighloadblockElementAdd',\n    function(Event $event) {\n        $parameters = &$event->getParameters();\n        $parameters['fields']['NAME'] = 'Теперь такое название';\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\n\nexport const modifBeforeAddCancel = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeHighloadblockElementAdd',\n    fn() => throw new ExchangeItemStoppedException('Так захотелось')\n);\n`;\n\nexport const errorBeforeAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeHighloadblockElementAdd',\n    fn() => new EventResult(EventResult::ERROR, ['errors' => ['Ошибка 1', 'Ошибка 2']])\n);\n`;\n\nexport const afterAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onAfterHighloadblockElementAdd',\n    fn() => CEvent::Send(....)\n);\n`;","<script setup>\nimport ApiLink from \"@/components/link/ApiLink.vue\";\nimport AlertMessage from \"@/components/messages/AlertMessage.vue\";\nimport CodeBlock from \"@/components/block-code/CodeBlock.vue\";\nimport {\n  afterAdd,\n  afterUpdate, errorBeforeAdd,\n  errorBeforeUpdate,\n  exampleStart,\n  medifBeforeUpdateCancel, modifBeforeAdd, modifBeforeAddCancel,\n  modifBefureUpdate\n} from \"@/data/codes/php/target/import/hl/element\";\nimport CardContainer from \"@/components/container/CardContainer.vue\";\nimport {reactive} from \"vue\";\nimport TableContents from \"@/components/table-contents/TableContents.vue\";\nimport TableBlock from \"@/components/table/TableBlock.vue\";\n\nconst data = reactive({\n  tableContents: [\n    {\n      title: 'Конфигурация',\n      hash: 'configuration',\n    },\n    {\n      title: 'Пример',\n      hash: 'example',\n    },\n    {\n      title: 'События',\n      hash: 'events',\n      children: [\n        {\n          title: 'onBeforeHighloadblockElementUpdate',\n          hash: 'before-update',\n        },\n        {\n          title: 'onAfterHighloadblockElementUpdate',\n          hash: 'after-update'\n        },\n        {\n          title: 'onBeforeHighloadblockElementAdd',\n          hash: 'before-add'\n        },\n        {\n          title: 'onAfterHighloadblockElementAdd',\n          hash: 'after-add'\n        },\n      ]\n    }\n  ]\n})\n</script>\n\n<template>\n  <card-container>\n    <template #header>\n      <h1>Импорт элементов справочника</h1>\n    </template>\n\n    <p>\n      Класс: <api-link path=\"classes/Sholokhov-Exchange-Target-Highloadblock-Element.html\">Element</api-link>\n      <br>\n      Наследник класса: <api-link path=\"classes/Sholokhov-Exchange-Exchange.html\">Exchange</api-link>\n    </p>\n\n    <table-contents :items=\"data.tableContents\" />\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h2 id=\"configuration\">Конфигурация</h2>\n    </template>\n\n    <p>\n      Импорт поддерживает следующий формат конфигурации (иные ключи пропускаются и не используются):\n    </p>\n\n    <table-block>\n      <template #head>\n        <tr>\n          <td>Название</td>\n          <td>Обязательное</td>\n          <td>Тип данных</td>\n          <td>Значение по умолчанию</td>\n          <td>Описание</td>\n        </tr>\n      </template>\n\n      <tr>\n        <td>entity_id</td>\n        <td>Да</td>\n        <td>int</td>\n        <td>Нет</td>\n        <td>Идентификатор сущности в который производится импорт элементов</td>\n      </tr>\n    </table-block>\n\n    <alert-message>\n      <template #header>Внимание</template>\n\n      Деактивация элементов не поддерживается\n    </alert-message>\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h2 id=\"example\">Пример</h2>\n    </template>\n\n    <p>\n      Разберем пример запуска импорта элементов информационного блока\n    </p>\n\n    <code-block :code=\"exampleStart\" />\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h2 id=\"preparation\">Преобразователи</h2>\n    </template>\n\n    <p>\n      Импорт элементов справочника поддерживает свойства следующих типов:\n    </p>\n    <ul>\n      <li>Дата</li>\n      <li>Дата и время</li>\n      <li>Список</li>\n      <li>Файл</li>\n      <li>Логическое значение</li>\n      <li>Привязка к элементу информационного блока</li>\n      <li>Привязка к разделу информационного блока</li>\n    </ul>\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h2 id=\"events\">События</h2>\n    </template>\n\n    <p>\n      Импорт в ходе своей работы вызывает события, которые могут помочь произвести его модификацию и проконтролировать процесс выполнения импорта элементов.\n      <br>\n      Все события реализованы на <a href=\"https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=43&LESSON_ID=3113\" target=\"_blank\">d7</a>\n      Рассмотрим список доступных событий\n    </p>\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h3 id=\"before-update\">onBeforeHighloadblockElementUpdate</h3>\n    </template>\n\n    <p>\n      Вызывается перед обновлением элемента.\n      <br>\n      Передаваемые параметры в обработчик\n    </p>\n\n    <table-block>\n      <template #head>\n        <tr>\n          <td>Название</td>\n          <td>Обязательное</td>\n          <td>Тип данных</td>\n          <td>Передается по ссылке</td>\n          <td>Описание</td>\n        </tr>\n      </template>\n\n      <tr>\n        <td>fields</td>\n        <td>Да</td>\n        <td>array</td>\n        <td>Да</td>\n        <td>Подготовленные данные, которые будут принимать участие в обновлении.</td>\n      </tr>\n      <tr>\n        <td>id</td>\n        <td>Да</td>\n        <td>int</td>\n        <td>Нет</td>\n        <td>Идентификатор элемента, который было обновляться</td>\n      </tr>\n      <tr>\n        <td>exchange</td>\n        <td>Да</td>\n        <td>int</td>\n        <td>Нет</td>\n        <td>Текущий объект обмена</td>\n      </tr>\n    </table-block>\n\n    <alert-message>\n      <template #header>Внимание</template>\n\n      Присутствует возможность отменить создание элемента, для этого необходимо вызвать исключение <api-link path=\"classes/Sholokhov-Exchange-Exception-Target-ExchangeItemStoppedException.html\">ExchangeItemStoppedException</api-link>\n      После отмены создания производится запись в лог файл с возможностью переопределения сообщения. В качестве сообщения, для записи в лог берется сообщение исключения.\n    </alert-message>\n\n    <alert-message>\n      <template #header>Внимание</template>\n\n      Если событие вернет статут отличный от успешного, то будет считаться, что в пользовательском событии возникла ошибка, и добавление не произойдет.\n      <br>\n      Присутствует возможность передачи массив ошибок, которые будут перенесены в результат работы импорта.\n    </alert-message>\n\n    <h4>Пример модификации данных</h4>\n    <code-block :code=\"modifBefureUpdate\" />\n\n    <h4>Пример отмены обновления</h4>\n    <code-block :code=\"medifBeforeUpdateCancel\" />\n\n    <h4>Пример передачи ошибки при выполнении события</h4>\n    <code-block :code=\"errorBeforeUpdate\" />\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h3 id=\"after-update\">onAfterHighloadblockElementUpdate</h3>\n    </template>\n\n    <p>\n      Вызывается после выполнения обновления элемента.\n      Передаваемые параметры в обработчик\n    </p>\n\n    <table-block>\n      <template #head>\n        <tr>\n          <td>Название</td>\n          <td>Обязательное</td>\n          <td>Тип данных</td>\n          <td>Передается по ссылке</td>\n          <td>Описание</td>\n        </tr>\n      </template>\n\n      <tr>\n        <td>fields</td>\n        <td>Да</td>\n        <td>array</td>\n        <td>Да</td>\n        <td>Подготовленные данные, которые будут принимать участие в обновлении.</td>\n      </tr>\n      <tr>\n        <td>id</td>\n        <td>Да</td>\n        <td>int</td>\n        <td>Нет</td>\n        <td>Идентификатор элемента, который будет обновляться</td>\n      </tr>\n      <tr>\n        <td>result</td>\n        <td>Да</td>\n        <td>\n          <api-link path=\"classes/Sholokhov-Exchange-Messages-DataResultInterface.html\">DataResultInterface</api-link>\n        </td>\n        <td>Нет</td>\n        <td>Результат обновления элемента</td>\n      </tr>\n    </table-block>\n\n    <p>Событие не позволяет вмешаться в процесс обмена, а только служит флагом, дря разработчика</p>\n    <h4>Пример подписки на событие</h4>\n\n    <code-block :code=\"afterUpdate\" />\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h3 id=\"before-add\">onBeforeHighloadblockElementAdd</h3>\n    </template>\n\n    <p>\n      Вызывается перед созданием элемента.\n      <br>\n      Передаваемые параметры в обработчик\n    </p>\n\n    <table-block>\n      <template #head>\n        <tr>\n          <td>Название</td>\n          <td>Обязательное</td>\n          <td>Тип данных</td>\n          <td>Передается по ссылке</td>\n          <td>Описание</td>\n        </tr>\n      </template>\n\n      <tr>\n        <td>fields</td>\n        <td>Да</td>\n        <td>array</td>\n        <td>Да</td>\n        <td>Подготовленные данные, которые будут принимать участие в добавлении</td>\n      </tr>\n      <tr>\n        <td>fields</td>\n        <td>Да</td>\n        <td>Element</td>\n        <td>Нет</td>\n        <td>Текущий объект обмена</td>\n      </tr>\n    </table-block>\n\n    <alert-message>\n      <template #header>Внимание</template>\n\n      Присутствует возможность отменить добавления элемента, для этого необходимо вызвать исключение <api-link path=\"classes/Sholokhov-Exchange-Exception-Target-ExchangeItemStoppedException.html\">ExchangeItemStoppedException</api-link>\n      После отмены добавления производится запись в лог файл с возможностью переопределения сообщения. В качестве сообщения, для записи в лог берется сообщение исключения.\n    </alert-message>\n\n    <alert-message>\n      <template #header>Внимание</template>\n\n      Если событие вернет статут отличный от успешного, то будет считаться, что в пользовательском событии возникла ошибка, и добавление не произойдет.\n      <br>\n      Присутствует возможность передачи массив ошибок, которые будут перенесены в результат работы импорта.\n    </alert-message>\n\n    <h4>Пример модификации данных</h4>\n    <code-block :code=\"modifBeforeAdd\" />\n\n    <h4>Пример отмены</h4>\n    <code-block :code=\"modifBeforeAddCancel\" />\n\n    <h4>Пример передачи ошибки при выполнении события</h4>\n    <code-block :code=\"errorBeforeAdd\" />\n  </card-container>\n\n  <card-container>\n    <template #header>\n      <h3 id=\"after-add\">onAfterHighloadblockElementAdd</h3>\n    </template>\n\n    <p>\n      Вызывается после выполнения добавления элемента.\n      Передаваемые параметры в обработчик\n    </p>\n\n    <table-block>\n      <template #head>\n        <tr>\n          <td>Название</td>\n          <td>Обязательное</td>\n          <td>Тип данных</td>\n          <td>Передается по ссылке</td>\n          <td>Описание</td>\n        </tr>\n      </template>\n\n      <tr>\n        <td>fields</td>\n        <td>Да</td>\n        <td>array</td>\n        <td>Да</td>\n        <td>Подготовленные данные, которые будут принимать участие в добавлении</td>\n      </tr>\n      <tr>\n        <td>id</td>\n        <td>Да</td>\n        <td>int</td>\n        <td>Нет</td>\n        <td>Идентификатор элемента, который было добавлено</td>\n      </tr>\n      <tr>\n        <td>result</td>\n        <td>Да</td>\n        <td>\n          <api-link path=\"classes/Sholokhov-Exchange-Messages-DataResultInterface.html\">DataResultInterface</api-link>\n        </td>\n        <td>Нет</td>\n        <td>Результат добавления элемента</td>\n      </tr>\n    </table-block>\n\n    <p>Событие не позволяет вмешаться в процесс обмена, а только служит флагом, дря разработчика</p>\n    <h4>Пример подписки на событие</h4>\n\n    <code-block :code=\"afterAdd\" />\n  </card-container>\n\n</template>","import script from \"./ElementPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ElementPage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./CodeBlock.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CodeBlock.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <section class=\"card mt-5 mb-5\">\n    <div class=\"card-body\">\n      <slot name=\"header\"></slot>\n      <div class=\"card-text\">\n        <slot></slot>\n      </div>\n    </div>\n  </section>\n</template>","import { render } from \"./CardContainer.vue?vue&type=template&id=0ec74814\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"table-container\">\n    <table class=\"table table-bordered\">\n      <thead>\n        <slot name=\"head\"></slot>\n      </thead>\n      <tbody>\n        <slot></slot>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<style scoped>\n.table-container {\n  overflow: auto;\n}\n</style>","import { render } from \"./TableBlock.vue?vue&type=template&id=caef40ec&scoped=true\"\nconst script = {}\n\nimport \"./TableBlock.vue?vue&type=style&index=0&id=caef40ec&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-caef40ec\"]])\n\nexport default __exports__","<template>\n  <div class=\"alert alert-info mt-2\" role=\"alert\">\n    <p><b><slot name=\"header\"></slot></b></p>\n    <slot></slot>\n  </div>\n</template>","import { render } from \"./AlertMessage.vue?vue&type=template&id=7eca967e\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["props","__props","href","computed","path","__exports__","route","useRoute","emit","__emit","to","item","name","params","hash","click","onMounted","scroll","watch","setTimeout","document","getElementById","scrollIntoView","behavior","exampleStart","modifBefureUpdate","medifBeforeUpdateCancel","errorBeforeUpdate","afterUpdate","modifBeforeAdd","modifBeforeAddCancel","errorBeforeAdd","afterAdd","data","reactive","tableContents","title","children","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_renderSlot","_ctx","$slots","_hoisted_3","script","render","undefined","role"],"sourceRoot":""}